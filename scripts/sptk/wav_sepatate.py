#!/usr/bin/env python

# wujian@2018

import argparse
import os

import numpy as np

from libs.utils import stft, istft, get_logger
from libs.opts import get_stft_parser
from libs.data_handler import SpectrogramReader, NumpyReader, ScriptReader

logger = get_logger(__name__)


def run(args):
    # shape: T x F, complex
    stft_kwargs = {
        "frame_length": args.frame_length,
        "frame_shift": args.frame_shift,
        "window": args.window,
        "center": args.center,  # false to comparable with kaldi
    }
    spectrogram_reader = SpectrogramReader(args.wav_scp, **stft_kwargs)
    mask_reader = NumpyReader(args.mask_scp) if args.numpy else ScriptReader(
        args.mask_scp)

    num_utts = 0
    for key, specs in spectrogram_reader:
        if key in mask_reader:
            num_utts += 1
            mask = mask_reader[key]
            if args.transpose:
                mask = np.transpose(mask)
            logger.info("Processing utterance {}...".format(key))
            if mask.shape != specs.shape:
                raise ValueError(
                    "Dimention mismatch between mask and spectrogram"
                    "({:d} x {:d} vs {:d} x {:d}), need check configures".
                    format(mask.shape[0], mask.shape[1], specs.shape[0],
                           specs.shape[1]))
            istft(
                os.path.join(args.dst_dir, "{}.wav".format(key)), specs * mask,
                **stft_kwargs)
    logger.info("Processed {} utterances".format(num_utts))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=
        "Command to separate target component from mixtures given Tf-masks",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        parents=[get_stft_parser()])
    parser.add_argument(
        "wav_scp", type=str, help="Mixture wave scripts in kaldi format")
    parser.add_argument(
        "mask_scp",
        type=str,
        help="Scripts of masks generated by kaldi's networks(default)/numpy's "
        "matrix(add --numpy)")
    parser.add_argument(
        "dst_dir", type=str, help="Location to dump separated wave files")
    parser.add_argument(
        "--numpy",
        action="store_true",
        dest="numpy",
        help="Define type of masks in numpy.ndarray instead of "
        "kaldi's archives")
    parser.add_argument(
        "--transpose-mask",
        action="store_true",
        dest="transpose",
        help="Transpose mask from FxT to TxF(T: num_frames, F: num_bins)")
    args = parser.parse_args()
    run(args)

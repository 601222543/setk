#!/usr/bin/env python

# wujian@2018

import argparse
import os

import numpy as np

from libs.utils import stft, istft, get_logger
from libs.opts import StftParser
from libs.data_handler import SpectrogramReader, NumpyReader, ScriptReader, WaveWriter

logger = get_logger(__name__)


def run(args):
    # shape: T x F, complex
    stft_kwargs = {
        "frame_length": args.frame_length,
        "frame_shift": args.frame_shift,
        "window": args.window,
        "center": args.center,
    }
    spectrogram_reader = SpectrogramReader(
        args.wav_scp,
        **stft_kwargs,
        round_power_of_two=args.round_power_of_two)
    mask_reader = NumpyReader(args.mask_scp) if args.numpy else ScriptReader(
        args.mask_scp)

    num_done = 0
    with WaveWriter(args.dst_dir, fs=args.samp_freq) as writer:
        for key, specs in spectrogram_reader:
            if key in mask_reader:
                num_done += 1
                mask = mask_reader[key]
                if args.transpose:
                    mask = np.transpose(mask)
                logger.info("Processing utterance {}...".format(key))
                if mask.shape != specs.shape:
                    raise ValueError(
                        "Dimention mismatch between mask and spectrogram"
                        "({0[0]} x {0[1]} vs {1[0]} x {1[1]}), need check configures"
                        .format(mask.shape, specs.shape))
                nsamps = spectrogram_reader.nsamps(
                    key) if args.keep_length else None
                norm = spectrogram_reader.samp_norm(key)
                samps = istft(
                    specs * mask, **stft_kwargs, norm=norm, nsamps=nsamps)
                writer.write(key, samps)
    logger.info("Processed {:d} utterances over {:d}".format(
        num_done, len(spectrogram_reader)))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=
        "Command to separate target component from mixtures given Tf-masks",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        parents=[StftParser.parser])
    parser.add_argument(
        "wav_scp", type=str, help="Mixture wave scripts in kaldi format")
    parser.add_argument(
        "mask_scp",
        type=str,
        help="Scripts of masks generated by kaldi's networks(default)/numpy's "
        "matrix(add --numpy)")
    parser.add_argument(
        "dst_dir", type=str, help="Location to dump separated wave files")
    parser.add_argument(
        "--sample-frequency",
        type=int,
        default=16000,
        dest="samp_freq",
        help="Waveform data sample frequency")
    parser.add_argument(
        "--keep-length",
        action="store_true",
        help="If ture, keep result the same length as orginal")
    parser.add_argument(
        "--numpy",
        action="store_true",
        help="Define type of masks in numpy.ndarray instead of "
        "kaldi's archives")
    parser.add_argument(
        "--transpose-mask",
        dest="transpose",
        action="store_true",
        help="Transpose mask from FxT to TxF(T: num_frames, F: num_bins)")
    args = parser.parse_args()
    run(args)
